#!/usr/bin/env python
PACKAGE = "slamdunk_node"

from dynamic_reconfigure.parameter_generator_catkin import *

from slamdunk_msgs.msg import (
    ReconfigureLevels,
    ServiceTrigger,
    StreamingTypes,
    VideoModes,
    VideoSources, )

gen = ParameterGenerator()

gen.add("crop_width", int_t, ReconfigureLevels.NODE, "The width of the crop sent through left_rgb, left_grayscale, right_rgb and right_grayscale topics", 640, 1, 1500)
gen.add("crop_height", int_t, ReconfigureLevels.NODE, "The height of the crop sent through left_rgb, left_grayscale, right_rgb and right_grayscale topics", 480, 1, 1500)

# h264 streaming
streaming = gen.add_group("streaming")
streaming.add("streaming_crop_width", int_t, ReconfigureLevels.STREAMING, "The width of the crop sent through h264 streaming (0 for no crop)", 0, 0, 1500)
streaming.add("streaming_crop_height", int_t, ReconfigureLevels.STREAMING, "The height of the crop sent through h264 streaming (0 for no crop)", 0, 0, 1500)
streaming.add("streaming_rescale_width", int_t, ReconfigureLevels.STREAMING, "The rescale width for h264 streaming (0 for no rescale)", 0, 0, 1500)
streaming.add("streaming_rescale_height", int_t, ReconfigureLevels.STREAMING, "The rescale height for h264 streaming (0 for no rescale)", 0, 0, 1500)
streaming.add("streaming_bitrate", int_t, ReconfigureLevels.STREAMING, "The target bitrate for h264 streaming", 200000, 2000, 20000000)
streaming_mode_enum = gen.enum([ gen.const("rtp", int_t, StreamingTypes.TYPE_RTP, "RTP streaming"),
                                 gen.const("file", int_t, StreamingTypes.TYPE_FILE, "Record in a file")],
                               "An enum to set STREAMING TYPE")
streaming.add("streaming_type", int_t, ReconfigureLevels.STREAMING, "Streaming Type",
              StreamingTypes.TYPE_RTP, StreamingTypes.TYPE_MIN, StreamingTypes.TYPE_MAX, edit_method = streaming_mode_enum)
# rqt_reconfigure on kinetic will crash with a "hide" type group.
# Uncomment if rqt_reconfigure client runs on indigo or if rqt_reconfigure has been fixed.
# streaming_rtp_group = streaming.add_group("rtp", type="hide", state=True)
streaming_rtp_group = streaming.add_group("rtp")
streaming_rtp_group.add("streaming_rtp_host", str_t, ReconfigureLevels.STREAMING, "The target host for h264 streaming", "192.168.45.255")
streaming_rtp_group.add("streaming_rtp_port_left", int_t, ReconfigureLevels.STREAMING, "The target port for h264 streaming, data from left camera. Set to 0 to disable left camera streaming.", 5000, 0, 65535)
streaming_rtp_group.add("streaming_rtp_port_right", int_t, ReconfigureLevels.STREAMING, "The target port for h264 streaming, data from right camera. Set to 0 to disable right camera streaming.", 5100, 0, 65535)
# rqt_reconfigure on kinetic will crash with a "hide" type group
# Uncomment if rqt_reconfigure client runs on indigo or if rqt_reconfigure has been fixed.
# streaming_file_group = streaming.add_group("file", type="hide", state=False)
streaming_file_group = streaming.add_group("file")
streaming_file_group.add("streaming_file_path", str_t, ReconfigureLevels.STREAMING, "The target path for h264 recording", "/data/record.mkv")
streaming_file_group.add("streaming_file_enable_left", bool_t, ReconfigureLevels.STREAMING, "Enable left frame in h264 recording", True)
streaming_file_group.add("streaming_file_enable_right", bool_t, ReconfigureLevels.STREAMING, "Enable right frame in h264 recording", True)

video_mode_enum = gen.enum([ gen.const("auto", int_t, VideoModes.MODE_AUTO, "auto-select. In live mode, defaults to: 1280*960 pixels, 30fps"),
                             gen.const("1280_960_30", int_t, VideoModes.MODE_1280_960_30, "1280*960 pixels, 30fps"),
                             gen.const("1500_1500_30", int_t, VideoModes.MODE_1500_1500_30, "1500*1500 pixels, 30fps"),
                             gen.const("1500_1500_60", int_t, VideoModes.MODE_1500_1500_60, "1500*1500 pixels, 60fps"),
                             gen.const("900_700_120", int_t, VideoModes.MODE_900_700_120, "900*700 pixels, 120fps")],
                           "An enum to set VIDEO MODE")

gen.add("video_mode", int_t, ReconfigureLevels.VIDEO_MODE, "Video Mode",
        VideoModes.MODE_1280_960_30, VideoModes.MODE_MIN, VideoModes.MODE_MAX, edit_method = video_mode_enum)


video_source_enum = gen.enum([ gen.const("live", int_t, VideoSources.SOURCE_LIVE, "live"),
                             gen.const("vdec_sw", int_t, VideoSources.SOURCE_VDEC_SW, "offline-software decoder"),
                             gen.const("vdec_hw", int_t, VideoSources.SOURCE_VDEC_HW, "offline-hardware decoder")],
                           "An enum to set VIDEO SOURCE")

gen.add("video_source", int_t, ReconfigureLevels.VIDEO_SOURCE, "Video Source",
        VideoSources.SOURCE_LIVE, VideoSources.SOURCE_MIN, VideoSources.SOURCE_MAX, edit_method = video_source_enum)

service_trigger_enum = gen.enum([
    gen.const("ondemand", int_t, ServiceTrigger.ON_DEMAND,
              "Automatically enable service when there are subscribers"),
    gen.const("always", int_t, ServiceTrigger.ALWAYS,
              "Always run the service"),
    gen.const(
        "never", int_t, ServiceTrigger.NEVER,
        "Do not run the service, even if someone subscribes to its topics"),
], "An enum to describe when a service is triggered")

gen.add("service_trigger_capture",          # name
        int_t,                              # param type
        ReconfigureLevels.SERVICE_TRIGGER,  # level
        "Capture service trigger",          # description
        default=ServiceTrigger.ON_DEMAND,
        min=ServiceTrigger.TRIGGER_MIN,
        max=ServiceTrigger.TRIGGER_MAX,
        edit_method=service_trigger_enum)
gen.add("service_trigger_streaming",        # name
        int_t,                              # param type
        ReconfigureLevels.SERVICE_TRIGGER,  # level
        "Streaming service trigger",        # description
        default=ServiceTrigger.ON_DEMAND,
        min=ServiceTrigger.TRIGGER_MIN,
        max=ServiceTrigger.TRIGGER_MAX,
        edit_method=service_trigger_enum)
gen.add("service_trigger_slam",             # name
        int_t,                              # param type
        ReconfigureLevels.SERVICE_TRIGGER,  # level
        "SLAM service trigger",             # description
        default=ServiceTrigger.ON_DEMAND,
        min=ServiceTrigger.TRIGGER_MIN,
        max=ServiceTrigger.TRIGGER_MAX,
        edit_method=service_trigger_enum)

# Second argument is for docs, third argument is for filename generation (SLAMDunkNodeConfig.h)
exit(gen.generate(PACKAGE, "SLAMDunkNode", "SLAMDunkNode"))
